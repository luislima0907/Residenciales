@model object
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using WebDBFinal.Entities
@using WebDBFinal.Services

@{
    ViewData["Title"] = $"Editar {ViewBag.EntityName}";
    var properties = (List<PropertyInfo>)ViewBag.Properties;
    var keyProperties = (List<PropertyInfo>)ViewBag.KeyProperties;
    var foreignKeyData = ViewBag.ForeignKeyData as Dictionary<string, List<DropdownItem>> ?? new Dictionary<string, List<DropdownItem>>();
    var currentClusterValue = ViewBag.CurrentClusterValue?.ToString() ?? "";
    var currentCasaValue = ViewBag.CurrentCasaValue?.ToString() ?? "";
    var currentForeignKeyValue = !string.IsNullOrEmpty(currentClusterValue) ? currentClusterValue : currentCasaValue;
    var renderedFKs = new HashSet<string>();
    
    // Detectar si estamos editando un Cluster
    var isCluster = ViewBag.EntityName == "Cluster";
    var originalCodigoSucursal = ViewBag.OriginalCodigoSucursal;
    var originalCodigoSector = ViewBag.OriginalCodigoSector;
}

<div class="row">
    <div class="col-md-8 offset-md-2">
        <h2 class="mb-4">Editar @ViewBag.EntityName</h2>

        <div class="card shadow-sm">
            <div class="card-body">
                <form asp-action="Edit" method="post">
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                    @* Si es Cluster, agregar campos ocultos para valores originales *@
                    @if (isCluster && originalCodigoSucursal != null && originalCodigoSector != null)
                    {
                        <input type="hidden" name="OriginalCodigoSucursal" value="@originalCodigoSucursal" />
                        <input type="hidden" name="OriginalCodigoSector" value="@originalCodigoSector" />
                    }

                    @foreach (var prop in properties)
                    {
                        var isKey = keyProperties.Any(k => k.Name == prop.Name);
                        
                        // Para Cluster, permitir editar CodigoSucursal y CodigoSector aunque sean keys
                        var isEditableKey = isCluster && (prop.Name == "CodigoSucursal" || prop.Name == "CodigoSector");
                        var shouldBeReadonly = isKey && !isEditableKey;
                        
                        var stringLengthAttr = prop.GetCustomAttribute<StringLengthAttribute>();
                        var maxLength = stringLengthAttr?.MaximumLength ?? 100;
                        var currentValue = prop.GetValue(Model);
                        var hasForeignKey = foreignKeyData.ContainsKey(prop.Name);

                        // Detectar si el campo es nullable correctamente
                        var underlyingType = Nullable.GetUnderlyingType(prop.PropertyType);
                        var isNullableValueType = underlyingType != null;
                        
                        // Para strings, verificar si tiene Required attribute O si el nombre del campo 
                        // indica que es obligatorio (no contiene "Segundo", "Tercer", etc.)
                        var hasRequiredAttribute = prop.GetCustomAttribute<RequiredAttribute>() != null;
                        var isStringType = prop.PropertyType == typeof(string);
                        
                        // Lista de campos que sabemos que son opcionales para Persona
                        var optionalFieldNames = new[] { "SegundoNombre", "TercerNombre", "SegundoApellido", "TercerApellido" };
                        var isOptionalByName = optionalFieldNames.Contains(prop.Name);
                        
                        // Un campo es requerido si:
                        // - Es un value type no nullable (int, DateTime, etc.)
                        // - Es un string con [Required]
                        // - Es un string que NO está en la lista de opcionales
                        var isRequired = (!isNullableValueType && prop.PropertyType.IsValueType) || 
                                        (isStringType && hasRequiredAttribute) ||
                                        (isStringType && !isOptionalByName && !hasRequiredAttribute);
                        
                        // Para campos string sin [Required] explícito, revisar si termina en = null!
                        if (isStringType && !hasRequiredAttribute && !isOptionalByName)
                        {
                            // Si no tiene Required pero tampoco está en la lista de opcionales, es requerido
                            isRequired = true;
                        }
                        else if (isStringType && isOptionalByName)
                        {
                            isRequired = false;
                        }

                        // Si ya renderizamos este grupo de FK compuesta, saltarlo
                        if (hasForeignKey && renderedFKs.Contains(prop.Name))
                        {
                            continue;
                        }

                        <div class="mb-3">
                            <label for="@prop.Name" class="form-label">
                                @prop.Name
                                @if (isRequired)
                                {
                                    <span class="text-danger">*</span>
                                }
                            </label>
                            
                            @if (hasForeignKey)
                            {
                                var items = foreignKeyData[prop.Name];
                                
                                // Detectar si es FK compuesta (múltiples propiedades con los mismos items)
                                var relatedProps = foreignKeyData
                                    .Where(kvp => kvp.Value == items && kvp.Key != prop.Name)
                                    .Select(kvp => kvp.Key)
                                    .ToList();
                                
                                if (relatedProps.Any())
                                {
                                    // FK Compuesta - mostrar un solo dropdown
                                    var allFKParts = new List<string> { prop.Name };
                                    allFKParts.AddRange(relatedProps);
                                    
                                    <select class="form-select fk-composite" 
                                            data-fk-parts="@string.Join(",", allFKParts)" 
                                            @(shouldBeReadonly ? "disabled" : "") @(isRequired ? "required" : "")>
                                        <option value="">-- Seleccione (@string.Join(", ", allFKParts)) --</option>
                                        @foreach (var item in items)
                                        {
                                            var isSelected = item.Value == currentForeignKeyValue;
                                            @if (isSelected)
                                            {
                                                <option value="@item.Value" selected>@item.Text</option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    </select>
                                    
                                    @foreach (var part in allFKParts)
                                    {
                                        var partValue = Model.GetType().GetProperty(part)?.GetValue(Model)?.ToString() ?? "";
                                        <input type="hidden" name="@part" class="fk-part-@part" value="@partValue" />
                                        renderedFKs.Add(part);
                                    }
                                    
                                    <small class="text-muted">Este campo representa: @string.Join(", ", allFKParts)</small>
                                }
                                else
                                {
                                    // FK Simple
                                    var currentValueStr = currentValue?.ToString() ?? "";
                                    <select class="form-select" id="@prop.Name" name="@prop.Name" @(shouldBeReadonly ? "disabled" : "") @(isRequired ? "required" : "")>
                                        <option value="">-- Seleccione @prop.Name --</option>
                                        @foreach (var item in items)
                                        {
                                            var isSelected = item.Value == currentValueStr;
                                            @if (isSelected)
                                            {
                                                <option value="@item.Value" selected>@item.Text</option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    </select>
                                    @if (shouldBeReadonly)
                                    {
                                        <input type="hidden" name="@prop.Name" value="@currentValue" />
                                        <small class="text-muted">Este campo no se puede modificar</small>
                                    }
                                    else if (isEditableKey)
                                    {
                                        <small class="text-muted">Puede cambiar este valor</small>
                                    }
                                    else if (!isRequired)
                                    {
                                        <small class="text-muted">Opcional</small>
                                    }
                                    else
                                    {
                                        <small class="text-muted">Seleccione de la lista</small>
                                    }
                                }
                            }
                            else if (prop.PropertyType == typeof(bool) || prop.PropertyType == typeof(bool?))
                            {
                                var boolValue = currentValue != null ? Convert.ToBoolean(currentValue) : false;
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="@prop.Name" name="@prop.Name" 
                                           value="true" @(boolValue ? "checked" : "") @(shouldBeReadonly ? "disabled" : "") />
                                    <input type="hidden" name="@prop.Name" value="false" />
                                    <label class="form-check-label" for="@prop.Name">
                                        Activar
                                    </label>
                                </div>
                                @if (shouldBeReadonly)
                                {
                                    <input type="hidden" name="@prop.Name" value="@boolValue" />
                                }
                            }
                            else if (prop.PropertyType == typeof(DateTime) || prop.PropertyType == typeof(DateTime?) ||
                                     prop.PropertyType == typeof(DateOnly) || prop.PropertyType == typeof(DateOnly?))
                            {
                                var dateValue = "";
                                if (currentValue != null)
                                {
                                    if (currentValue is DateTime dt)
                                        dateValue = dt.ToString("yyyy-MM-dd");
                                    else if (currentValue is DateOnly d)
                                        dateValue = d.ToString("yyyy-MM-dd");
                                }
                                <input type="date" class="form-control" id="@prop.Name" name="@prop.Name" 
                                       value="@dateValue" @(shouldBeReadonly ? "readonly" : "") @(isRequired ? "required" : "") />
                                @if (!isRequired && !shouldBeReadonly)
                                {
                                    <small class="text-muted">Opcional</small>
                                }
                            }
                            else if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(short) || prop.PropertyType == typeof(byte) ||
                                     prop.PropertyType == typeof(int?) || prop.PropertyType == typeof(short?) || prop.PropertyType == typeof(byte?))
                            {
                                <input type="number" class="form-control" id="@prop.Name" name="@prop.Name" 
                                       value="@currentValue" placeholder="Ingrese @prop.Name" 
                                       @(shouldBeReadonly ? "readonly" : "") @(isRequired ? "required" : "") />
                                @if (shouldBeReadonly)
                                {
                                    <small class="text-muted">Este campo no se puede modificar</small>
                                }
                                else if (!isRequired)
                                {
                                    <small class="text-muted">Opcional</small>
                                }
                            }
                            else if (prop.PropertyType == typeof(decimal) || prop.PropertyType == typeof(double) ||
                                     prop.PropertyType == typeof(decimal?) || prop.PropertyType == typeof(double?))
                            {
                                <input type="number" step="0.01" class="form-control" id="@prop.Name" name="@prop.Name" 
                                       value="@currentValue" placeholder="Ingrese @prop.Name" 
                                       @(shouldBeReadonly ? "readonly" : "") @(isRequired ? "required" : "") />
                                @if (!isRequired && !shouldBeReadonly)
                                {
                                    <small class="text-muted">Opcional</small>
                                }
                            }
                            else
                            {
                                <input type="text" class="form-control" id="@prop.Name" name="@prop.Name" 
                                       value="@currentValue" placeholder="Ingrese @prop.Name" 
                                       maxlength="@maxLength" @(shouldBeReadonly ? "readonly" : "") @(isRequired ? "required" : "") />
                                @if (!isRequired && !shouldBeReadonly)
                                {
                                    <small class="text-muted">Opcional</small>
                                }
                            }
                            <span class="text-danger" data-valmsg-for="@prop.Name"></span>
                        </div>
                    }

                    @if (isCluster)
                    {
                        <div class="alert alert-info" role="alert">
                            <i class="bi bi-info-circle"></i> 
                            <strong>Nota:</strong> El código del cluster no puede modificarse, pero puede cambiar la sucursal y el sector asignados.
                        </div>
                    }

                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="bi bi-arrow-left"></i> Cancelar
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-save"></i> Actualizar
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Manejar FKs compuestas
        document.querySelectorAll('.fk-composite').forEach(function(select) {
            select.addEventListener('change', function() {
                var value = this.value;
                var parts = this.getAttribute('data-fk-parts').split(',');
                var values = value.split(',');
                
                // Asignar cada parte del valor a su campo hidden correspondiente
                parts.forEach(function(part, index) {
                    var hiddenField = document.querySelector('.fk-part-' + part.trim());
                    if (hiddenField && values[index]) {
                        hiddenField.value = values[index].trim();
                    }
                });
            });
        });
    </script>
}
